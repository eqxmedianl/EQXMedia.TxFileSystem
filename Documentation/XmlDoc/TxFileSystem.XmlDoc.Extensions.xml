<TxFileSystem.BaseDocs>
   <Extensions>
      <Classes>
         <Class modifying="true">
           <remarks>
             <para>
               Depending on the method being invoked on instances of this object the <conceptualLink 
                 target="c2ae6d22-7ebc-4b56-a4b0-f1f020697ae1">Operation Journal</conceptualLink> is used 
               to journalize the operation or not. <conceptualLink 
                 target="bc9e348b-8de7-44aa-aea1-458dad83e9a1">Transactional Operations</conceptualLink> 
               are journalized and <conceptualLink
                 target="e960b0a4-0eca-455f-91ef-d759b42928be">Non-Transactional Operations</conceptualLink>
               are not.
             </para>             
             <note type="caution">
               <conceptualLink 
                 target="c2ae6d22-7ebc-4b56-a4b0-f1f020697ae1#RollbackAndCommit">Backup and/or
                 restore</conceptualLink> only take place for operations journalized by an active <conceptualLink 
                 target="c2ae6d22-7ebc-4b56-a4b0-f1f020697ae1#JournalActivation">Operation Journal
               </conceptualLink>. Ensure that it <conceptualLink 
                 target="c2ae6d22-7ebc-4b56-a4b0-f1f020697ae1#JournalActivation">gets activated</conceptualLink>.
             </note>
           </remarks>
           <conceptualLink target="c2ae6d22-7ebc-4b56-a4b0-f1f020697ae1" />
           <conceptualLink target="bc9e348b-8de7-44aa-aea1-458dad83e9a1" />
           <conceptualLink target="e960b0a4-0eca-455f-91ef-d759b42928be" />
         </Class>
        <Class modifying="false">
           <summary>
             <para>
               Instances of this object only contain methods that don't modify file system resources.
               Its methods are simply passed to the wrapped file system.
             </para>
           </summary>
           <remarks>
             <para>
               Instances of this object only contain methods that don't modify any file system resources.
               Regardless of which of this object's methods is being invoked journalizing and, backup 
               and restore, never take place.
             </para>
           </remarks>
           <conceptualLink target="e960b0a4-0eca-455f-91ef-d759b42928be" />
         </Class>
         <Class context="property" property="FileSystem">
           <summary>
             Returns the <see cref="EQXMedia.TxFileSystem.TxFileSystem" />, which actually is an
             implementation of <c>System.IO.Abstractions.IFileSystem</c> itself too.
           </summary>
           <value>
             This read-only value contains the instance of the <see
               cref="EQXMedia.TxFileSystem.TxFileSystem" /> you created.
           </value>
           <revisionHistory visible="true">
             <revision date="04/26/2021" version="2.0.0" author="Jarno Kamminga" visible="true">
               Up to and including version <c>1.3.0</c> this property returned the wrapped file system. In 
               order to maintain data integrity, regardless of developers using this property directly,
               this property now returns the <see cref="EQXMedia.TxFileSystem.TxFileSystem" /> this object 
               instance is a property of.
             </revision>
           </revisionHistory>
           <remarks>
             <para>
               This property is exposed by the <c>System.IO.Abstractions.IDirectory</c> interface. The
               way it is implemented in this library, ensures that all operations performed through this
               property, are transactional too. Whenever required.
             </para>
             <para>
               Everywhere a <c>System.IO.Abstractions.IFileSystem</c> interface implementation is returned,
               the <see cref="EQXMedia.TxFileSystem.TxFileSystem" /> instance you created is returned.
               Instead of exposing the wrapped file system. This is done to make the transactional operations
               the default. Ensuring data integrity is kept intact.
             </para>
             <para>
               This property is useful for implementing extension methods.
             </para>
           </remarks>
         </Class>
         <Class context="property" property="TxFileSystem">
           <summary>
             Returns the <see cref="EQXMedia.TxFileSystem.TxFileSystem" /> this <see
               cref="EQXMedia.TxFileSystem.TxFileSystemWatcher" /> instance belongs to. Thus not the actual
             file system being wrapped.
           </summary>
           <remarks>
             <para>
               Use <see cref="EQXMedia.TxFileSystem.TxFileSystem.FileSystem" /> to perform operations on
               the wrapped file system.
             </para>
           </remarks>
         </Class>
         <Class context="constructor" param="TxFileSystem">
           <remarks>
             This is an internal constructor and thus not exposed to developers using this library.
             The class is constructed only by the library itself, as a child of <see
               cref="EQXMedia.TxFileSystem.TxFileSystem" /> instances developers can create.
           </remarks>
           <param name="txFileSystem">The transactional file system wrapper that creates an instance of this class (see remarks).</param>
         </Class>
         <Class type="TxFileSystemWatcher" method="CreateNew">
           <returns>The new instance of the <c>IFileSystemWatcher</c> implementation part of the wrapped file system.</returns>
           <remarks>The instance of the <c>IFileSystemWatcher</c> implementation returned abstracts the <see cref="System.IO.FileSystemWatcher" />.</remarks>
           <seealso href="https://github.com/System-IO-Abstractions/System.IO.Abstractions/blob/main/src/System.IO.Abstractions/IFileSystemWatcher.cs" />
         </Class>
      </Classes>
      <FileSystemProperties>
         <FileSystemProperty modifying="true">
           <remarks>
             <para>
               Depending on the method of this object's instance being invoked the journal is used or 
               not. Backup and restore takes place depending on usage of the journal.
             </para>
           </remarks>
           <value>
             <para>
               This object instance contains both methods that modify file system resources and methods 
               that don't modify any of them.
             </para>
           </value>
           <conceptualLink target="bc9e348b-8de7-44aa-aea1-458dad83e9a1" />
           <conceptualLink target="c2ae6d22-7ebc-4b56-a4b0-f1f020697ae1" />
         </FileSystemProperty>
         <FileSystemProperty modifying="false">
            <remarks>
              <para>
                This object instance only contains methods that don't modify any file system resources.
                Regardless of which of this object's methods is being invoked journalizing and, backup 
                and restore, never take place.
              </para>
            </remarks>
            <conceptualLink target="e960b0a4-0eca-455f-91ef-d759b42928be" />
         </FileSystemProperty>
      </FileSystemProperties>
      <Operations>      
         <Operation kind="FileOperation" type="modify">
            <remarks>
              <para>
                This is an operation that modifies one or more files, hence it is journalized. 
                Journalized file operations can either be rolled back or committed automatically, 
                restoring or removing the backup file(s), respectively. Whenever an <see 
                  cref="System.Exception"/> of any kind occurs, all journalized operations are 
                rolled back, resulting in the original state to be restored.
              </para>
              <para>
                If no <see cref="System.Exception"/> any kind occurs and the <see 
                cref="System.Transactions.TransactionScope" /> completes successfully, all journalized
                operations are committed. Any modifications made are then preserved and the backup file(s)
                are then removed.
              </para>
            </remarks>
            <conceptualLink target="bc9e348b-8de7-44aa-aea1-458dad83e9a1" />
            <conceptualLink target="c2ae6d22-7ebc-4b56-a4b0-f1f020697ae1" />
         </Operation>      
         <Operation kind="FileOperation" type="info">
            <remarks>
              <para>
                This is an operation that doesn't modify any files, hence it is not journalized. As there
                is no need to rollback any modifications whenever an <see cref="System.Exception"/> of any
                kind occurs inside a <see cref="System.Transactions.TransactionScope" />.
              </para>
            </remarks>
            <conceptualLink target="e960b0a4-0eca-455f-91ef-d759b42928be" />
         </Operation>
         <Operation kind="DirectoryOperation" type="create">
            <remarks>
              <para>
                This is an operation that creates a directory, hence it is journalized. Journalized file 
                operations can either be rolled back or committed automatically, removing or keeping the
                created directory, respectively. Whenever an <see cref="System.Exception"/> of any kind 
                occurs, all journalized operations are rolled back, resulting in the original state to 
                be restored.
              </para>
              <para>
                If no <see cref="System.Exception"/> any kind occurs and the <see 
                cref="System.Transactions.TransactionScope" /> completes successfully, all journalized
                operations are committed. Any modifications made are then preserved.
              </para>
              <conceptualLink target="bc9e348b-8de7-44aa-aea1-458dad83e9a1" />
              <conceptualLink target="c2ae6d22-7ebc-4b56-a4b0-f1f020697ae1" />
            </remarks>
         </Operation>
         <Operation kind="DirectoryOperation" type="delete">
            <remarks>
              <para>
                This is an operation that deletes a directory, hence it is journalized. Journalized file 
                operations can either be rolled back or committed automatically, restoring or keeping the
                directory deleted, respectively. Whenever an <see cref="System.Exception"/> of any kind 
                occurs, all journalized operations are rolled back, resulting in the original state to 
                be restored.
              </para>
              <para>
                If no <see cref="System.Exception"/> any kind occurs and the <see 
                cref="System.Transactions.TransactionScope" /> completes successfully, all journalized
                operations are committed. Any modifications made are then preserved.
              </para>
              <conceptualLink target="bc9e348b-8de7-44aa-aea1-458dad83e9a1" />
              <conceptualLink target="c2ae6d22-7ebc-4b56-a4b0-f1f020697ae1" />
            </remarks>
         </Operation>
         <Operation kind="DirectoryOperation" type="info">
            <remarks>
              <para>
                This is an operation that returns information about the directory or its contents, hence 
                it is not journalized. There is no need for the operation to be rolled back.
              </para>
              <conceptualLink target="e960b0a4-0eca-455f-91ef-d759b42928be" />
            </remarks>
         </Operation>
         <Operation kind="DirectoryOperation" type="modify">
            <remarks>
              <para>
                This is an operation that modifies a directory and/or its contents, hence it is 
                journalized. Journalized file operations can either be rolled back or committed 
                automatically, restoring or removing the backup directory and its contents,
                respectively. Whenever an <see cref="System.Exception"/> of any kind occurs, all 
                journalized operations are rolled back, resulting in the original state to be 
                restored.
              </para>
              <para>
                If no <see cref="System.Exception"/> any kind occurs and the <see
                cref="System.Transactions.TransactionScope" /> completes successfully, all journalized
                operations are committed. Any modifications made are then preserved and the backup 
                directory and its contents is then removed.
              </para>
              <conceptualLink target="bc9e348b-8de7-44aa-aea1-458dad83e9a1" />
              <conceptualLink target="c2ae6d22-7ebc-4b56-a4b0-f1f020697ae1" />
            </remarks>
         </Operation>
         <Operation kind="FileSystemOperation" type="info">
            <remarks>
              <para>
                This is an operation that returns information about the file system, hence it is not 
                journalized. There is no need for the operation to be rolled back.
              </para>
              <conceptualLink target="e960b0a4-0eca-455f-91ef-d759b42928be" />
            </remarks>
         </Operation>
         <Operation kind="FileStreamOperation" type="create" only_obsolete="true">
            <remarks>
              <para>
                Even though the underlying method of <see cref="FileStream" /> is <c>obsolete</c>, it is still 
                part of the <see href="https://github.com/System-IO-Abstractions/System.IO.Abstractions/blob/main/src/System.IO.Abstractions/IFileStreamFactory.cs"
                  alt="System.IO.Abstractions/IFileStreamFactory.cs at main - System-IO-Abstractions/System.IO.Abstractions"
                  target="_blank">System.IO.Abstractions.IFileStreamFactory</see> interface. Hence, it had to be implemented 
                here too. Therefor it is marked as being <c>obsolete</c> inside this library since the first time it was 
                released.
              </para>
            </remarks>
           <conceptualLink target="bc9e348b-8de7-44aa-aea1-458dad83e9a1" />
           <conceptualLink target="c2ae6d22-7ebc-4b56-a4b0-f1f020697ae1" />
         </Operation>
         <Operation kind="FileStreamOperation" type="create" from="handle">
           <returns>
             The newly created instance of the <see cref="FileStream" /> class for the specified file <c>handle</c>.
           </returns>
           <conceptualLink target="bc9e348b-8de7-44aa-aea1-458dad83e9a1" />
         </Operation>
         <Operation kind="FileStreamOperation" type="create" from="path">
           <returns>
             The newly created instance of the <see cref="FileStream" /> class for the specified file <c>path</c>.
           </returns>
           <conceptualLink target="bc9e348b-8de7-44aa-aea1-458dad83e9a1" />
           <conceptualLink target="c2ae6d22-7ebc-4b56-a4b0-f1f020697ae1" />
         </Operation>
      </Operations>
   </Extensions>
</TxFileSystem.BaseDocs>